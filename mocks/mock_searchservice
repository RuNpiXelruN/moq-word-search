// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/RuNpiXelruN/moq-word-search"
	"github.com/RuNpiXelruN/moq-word-search/proto"
	"sync"
)

var (
	lockSearchServiceMockIncrementCount   sync.RWMutex
	lockSearchServiceMockSingleWordSearch sync.RWMutex
	lockSearchServiceMockTopFiveSearch    sync.RWMutex
	lockSearchServiceMockUpdateWordList   sync.RWMutex
	lockSearchServiceMockWordExists       sync.RWMutex
)

// Ensure, that SearchServiceMock does implement moqwordsearch.SearchService.
// If this is not the case, regenerate this file with moq.
var _ moqwordsearch.SearchService = &SearchServiceMock{}

// SearchServiceMock is a mock implementation of moqwordsearch.SearchService.
//
//     func TestSomethingThatUsesSearchService(t *testing.T) {
//
//         // make and configure a mocked moqwordsearch.SearchService
//         mockedSearchService := &SearchServiceMock{
//             IncrementCountFunc: func(item *wsproto.SearchItem)  {
// 	               panic("mock out the IncrementCount method")
//             },
//             SingleWordSearchFunc: func(ctx context.Context, req *wsproto.SingleWordRequest) (*wsproto.SingleWordResponse, error) {
// 	               panic("mock out the SingleWordSearch method")
//             },
//             TopFiveSearchFunc: func(ctx context.Context, req *wsproto.TopFiveRequest) (*wsproto.TopFiveResponse, error) {
// 	               panic("mock out the TopFiveSearch method")
//             },
//             UpdateWordListFunc: func(ctx context.Context, req *wsproto.UpdateWordListRequest) (*wsproto.UpdateWordListResponse, error) {
// 	               panic("mock out the UpdateWordList method")
//             },
//             WordExistsFunc: func(searchTerm string, items []*wsproto.SearchItem, increment bool) bool {
// 	               panic("mock out the WordExists method")
//             },
//         }
//
//         // use mockedSearchService in code that requires moqwordsearch.SearchService
//         // and then make assertions.
//
//     }
type SearchServiceMock struct {
	// IncrementCountFunc mocks the IncrementCount method.
	IncrementCountFunc func(item *wsproto.SearchItem)

	// SingleWordSearchFunc mocks the SingleWordSearch method.
	SingleWordSearchFunc func(ctx context.Context, req *wsproto.SingleWordRequest) (*wsproto.SingleWordResponse, error)

	// TopFiveSearchFunc mocks the TopFiveSearch method.
	TopFiveSearchFunc func(ctx context.Context, req *wsproto.TopFiveRequest) (*wsproto.TopFiveResponse, error)

	// UpdateWordListFunc mocks the UpdateWordList method.
	UpdateWordListFunc func(ctx context.Context, req *wsproto.UpdateWordListRequest) (*wsproto.UpdateWordListResponse, error)

	// WordExistsFunc mocks the WordExists method.
	WordExistsFunc func(searchTerm string, items []*wsproto.SearchItem, increment bool) bool

	// calls tracks calls to the methods.
	calls struct {
		// IncrementCount holds details about calls to the IncrementCount method.
		IncrementCount []struct {
			// Item is the item argument value.
			Item *wsproto.SearchItem
		}
		// SingleWordSearch holds details about calls to the SingleWordSearch method.
		SingleWordSearch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *wsproto.SingleWordRequest
		}
		// TopFiveSearch holds details about calls to the TopFiveSearch method.
		TopFiveSearch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *wsproto.TopFiveRequest
		}
		// UpdateWordList holds details about calls to the UpdateWordList method.
		UpdateWordList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *wsproto.UpdateWordListRequest
		}
		// WordExists holds details about calls to the WordExists method.
		WordExists []struct {
			// SearchTerm is the searchTerm argument value.
			SearchTerm string
			// Items is the items argument value.
			Items []*wsproto.SearchItem
			// Increment is the increment argument value.
			Increment bool
		}
	}
}

// IncrementCount calls IncrementCountFunc.
func (mock *SearchServiceMock) IncrementCount(item *wsproto.SearchItem) {
	if mock.IncrementCountFunc == nil {
		panic("SearchServiceMock.IncrementCountFunc: method is nil but SearchService.IncrementCount was just called")
	}
	callInfo := struct {
		Item *wsproto.SearchItem
	}{
		Item: item,
	}
	lockSearchServiceMockIncrementCount.Lock()
	mock.calls.IncrementCount = append(mock.calls.IncrementCount, callInfo)
	lockSearchServiceMockIncrementCount.Unlock()
	mock.IncrementCountFunc(item)
}

// IncrementCountCalls gets all the calls that were made to IncrementCount.
// Check the length with:
//     len(mockedSearchService.IncrementCountCalls())
func (mock *SearchServiceMock) IncrementCountCalls() []struct {
	Item *wsproto.SearchItem
} {
	var calls []struct {
		Item *wsproto.SearchItem
	}
	lockSearchServiceMockIncrementCount.RLock()
	calls = mock.calls.IncrementCount
	lockSearchServiceMockIncrementCount.RUnlock()
	return calls
}

// SingleWordSearch calls SingleWordSearchFunc.
func (mock *SearchServiceMock) SingleWordSearch(ctx context.Context, req *wsproto.SingleWordRequest) (*wsproto.SingleWordResponse, error) {
	if mock.SingleWordSearchFunc == nil {
		panic("SearchServiceMock.SingleWordSearchFunc: method is nil but SearchService.SingleWordSearch was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *wsproto.SingleWordRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	lockSearchServiceMockSingleWordSearch.Lock()
	mock.calls.SingleWordSearch = append(mock.calls.SingleWordSearch, callInfo)
	lockSearchServiceMockSingleWordSearch.Unlock()
	return mock.SingleWordSearchFunc(ctx, req)
}

// SingleWordSearchCalls gets all the calls that were made to SingleWordSearch.
// Check the length with:
//     len(mockedSearchService.SingleWordSearchCalls())
func (mock *SearchServiceMock) SingleWordSearchCalls() []struct {
	Ctx context.Context
	Req *wsproto.SingleWordRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *wsproto.SingleWordRequest
	}
	lockSearchServiceMockSingleWordSearch.RLock()
	calls = mock.calls.SingleWordSearch
	lockSearchServiceMockSingleWordSearch.RUnlock()
	return calls
}

// TopFiveSearch calls TopFiveSearchFunc.
func (mock *SearchServiceMock) TopFiveSearch(ctx context.Context, req *wsproto.TopFiveRequest) (*wsproto.TopFiveResponse, error) {
	if mock.TopFiveSearchFunc == nil {
		panic("SearchServiceMock.TopFiveSearchFunc: method is nil but SearchService.TopFiveSearch was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *wsproto.TopFiveRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	lockSearchServiceMockTopFiveSearch.Lock()
	mock.calls.TopFiveSearch = append(mock.calls.TopFiveSearch, callInfo)
	lockSearchServiceMockTopFiveSearch.Unlock()
	return mock.TopFiveSearchFunc(ctx, req)
}

// TopFiveSearchCalls gets all the calls that were made to TopFiveSearch.
// Check the length with:
//     len(mockedSearchService.TopFiveSearchCalls())
func (mock *SearchServiceMock) TopFiveSearchCalls() []struct {
	Ctx context.Context
	Req *wsproto.TopFiveRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *wsproto.TopFiveRequest
	}
	lockSearchServiceMockTopFiveSearch.RLock()
	calls = mock.calls.TopFiveSearch
	lockSearchServiceMockTopFiveSearch.RUnlock()
	return calls
}

// UpdateWordList calls UpdateWordListFunc.
func (mock *SearchServiceMock) UpdateWordList(ctx context.Context, req *wsproto.UpdateWordListRequest) (*wsproto.UpdateWordListResponse, error) {
	if mock.UpdateWordListFunc == nil {
		panic("SearchServiceMock.UpdateWordListFunc: method is nil but SearchService.UpdateWordList was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *wsproto.UpdateWordListRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	lockSearchServiceMockUpdateWordList.Lock()
	mock.calls.UpdateWordList = append(mock.calls.UpdateWordList, callInfo)
	lockSearchServiceMockUpdateWordList.Unlock()
	return mock.UpdateWordListFunc(ctx, req)
}

// UpdateWordListCalls gets all the calls that were made to UpdateWordList.
// Check the length with:
//     len(mockedSearchService.UpdateWordListCalls())
func (mock *SearchServiceMock) UpdateWordListCalls() []struct {
	Ctx context.Context
	Req *wsproto.UpdateWordListRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *wsproto.UpdateWordListRequest
	}
	lockSearchServiceMockUpdateWordList.RLock()
	calls = mock.calls.UpdateWordList
	lockSearchServiceMockUpdateWordList.RUnlock()
	return calls
}

// WordExists calls WordExistsFunc.
func (mock *SearchServiceMock) WordExists(searchTerm string, items []*wsproto.SearchItem, increment bool) bool {
	if mock.WordExistsFunc == nil {
		panic("SearchServiceMock.WordExistsFunc: method is nil but SearchService.WordExists was just called")
	}
	callInfo := struct {
		SearchTerm string
		Items      []*wsproto.SearchItem
		Increment  bool
	}{
		SearchTerm: searchTerm,
		Items:      items,
		Increment:  increment,
	}
	lockSearchServiceMockWordExists.Lock()
	mock.calls.WordExists = append(mock.calls.WordExists, callInfo)
	lockSearchServiceMockWordExists.Unlock()
	return mock.WordExistsFunc(searchTerm, items, increment)
}

// WordExistsCalls gets all the calls that were made to WordExists.
// Check the length with:
//     len(mockedSearchService.WordExistsCalls())
func (mock *SearchServiceMock) WordExistsCalls() []struct {
	SearchTerm string
	Items      []*wsproto.SearchItem
	Increment  bool
} {
	var calls []struct {
		SearchTerm string
		Items      []*wsproto.SearchItem
		Increment  bool
	}
	lockSearchServiceMockWordExists.RLock()
	calls = mock.calls.WordExists
	lockSearchServiceMockWordExists.RUnlock()
	return calls
}
