// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	wsproto "github.com/RuNpiXelruN/moq-word-search/proto"
)

var (
	lockWordSearchServiceMockSingleWordSearch sync.RWMutex
	lockWordSearchServiceMockStartGRPC        sync.RWMutex
	lockWordSearchServiceMockStartREST        sync.RWMutex
	lockWordSearchServiceMockTopFiveSearch    sync.RWMutex
	lockWordSearchServiceMockUpdateWordList   sync.RWMutex
)

// Ensure, that WordSearchServiceMock does implement moqwordsearch.WordSearchService.
// If this is not the case, regenerate this file with moq.
// var _ moqwordsearch.WordSearchService = &WordSearchServiceMock{}

// WordSearchServiceMock is a mock implementation of moqwordsearch.WordSearchService.
//
//     func TestSomethingThatUsesWordSearchService(t *testing.T) {
//
//         // make and configure a mocked moqwordsearch.WordSearchService
//         mockedWordSearchService := &WordSearchServiceMock{
//             SingleWordSearchFunc: func(ctx context.Context, req *wsproto.SingleWordRequest) (*wsproto.SingleWordResponse, error) {
// 	               panic("mock out the SingleWordSearch method")
//             },
//             StartGRPCFunc: func() error {
// 	               panic("mock out the StartGRPC method")
//             },
//             StartRESTFunc: func() error {
// 	               panic("mock out the StartREST method")
//             },
//             TopFiveSearchFunc: func(ctx context.Context, req *wsproto.TopFiveRequest) (*wsproto.TopFiveResponse, error) {
// 	               panic("mock out the TopFiveSearch method")
//             },
//             UpdateWordListFunc: func(ctx context.Context, req *wsproto.UpdateWordListRequest) (*wsproto.UpdateWordListResponse, error) {
// 	               panic("mock out the UpdateWordList method")
//             },
//         }
//
//         // use mockedWordSearchService in code that requires moqwordsearch.WordSearchService
//         // and then make assertions.
//
//     }
type WordSearchServiceMock struct {
	// SingleWordSearchFunc mocks the SingleWordSearch method.
	SingleWordSearchFunc func(ctx context.Context, req *wsproto.SingleWordRequest) (*wsproto.SingleWordResponse, error)

	// StartGRPCFunc mocks the StartGRPC method.
	StartGRPCFunc func() error

	// StartRESTFunc mocks the StartREST method.
	StartRESTFunc func() error

	// TopFiveSearchFunc mocks the TopFiveSearch method.
	TopFiveSearchFunc func(ctx context.Context, req *wsproto.TopFiveRequest) (*wsproto.TopFiveResponse, error)

	// UpdateWordListFunc mocks the UpdateWordList method.
	UpdateWordListFunc func(ctx context.Context, req *wsproto.UpdateWordListRequest) (*wsproto.UpdateWordListResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// SingleWordSearch holds details about calls to the SingleWordSearch method.
		SingleWordSearch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *wsproto.SingleWordRequest
		}
		// StartGRPC holds details about calls to the StartGRPC method.
		StartGRPC []struct {
		}
		// StartREST holds details about calls to the StartREST method.
		StartREST []struct {
		}
		// TopFiveSearch holds details about calls to the TopFiveSearch method.
		TopFiveSearch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *wsproto.TopFiveRequest
		}
		// UpdateWordList holds details about calls to the UpdateWordList method.
		UpdateWordList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *wsproto.UpdateWordListRequest
		}
	}
}

// SingleWordSearch calls SingleWordSearchFunc.
func (mock *WordSearchServiceMock) SingleWordSearch(ctx context.Context, req *wsproto.SingleWordRequest) (*wsproto.SingleWordResponse, error) {
	if mock.SingleWordSearchFunc == nil {
		panic("WordSearchServiceMock.SingleWordSearchFunc: method is nil but WordSearchService.SingleWordSearch was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *wsproto.SingleWordRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	lockWordSearchServiceMockSingleWordSearch.Lock()
	mock.calls.SingleWordSearch = append(mock.calls.SingleWordSearch, callInfo)
	lockWordSearchServiceMockSingleWordSearch.Unlock()
	return mock.SingleWordSearchFunc(ctx, req)
}

// SingleWordSearchCalls gets all the calls that were made to SingleWordSearch.
// Check the length with:
//     len(mockedWordSearchService.SingleWordSearchCalls())
func (mock *WordSearchServiceMock) SingleWordSearchCalls() []struct {
	Ctx context.Context
	Req *wsproto.SingleWordRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *wsproto.SingleWordRequest
	}
	lockWordSearchServiceMockSingleWordSearch.RLock()
	calls = mock.calls.SingleWordSearch
	lockWordSearchServiceMockSingleWordSearch.RUnlock()
	return calls
}

// StartGRPC calls StartGRPCFunc.
func (mock *WordSearchServiceMock) StartGRPC() error {
	if mock.StartGRPCFunc == nil {
		panic("WordSearchServiceMock.StartGRPCFunc: method is nil but WordSearchService.StartGRPC was just called")
	}
	callInfo := struct {
	}{}
	lockWordSearchServiceMockStartGRPC.Lock()
	mock.calls.StartGRPC = append(mock.calls.StartGRPC, callInfo)
	lockWordSearchServiceMockStartGRPC.Unlock()
	return mock.StartGRPCFunc()
}

// StartGRPCCalls gets all the calls that were made to StartGRPC.
// Check the length with:
//     len(mockedWordSearchService.StartGRPCCalls())
func (mock *WordSearchServiceMock) StartGRPCCalls() []struct {
} {
	var calls []struct {
	}
	lockWordSearchServiceMockStartGRPC.RLock()
	calls = mock.calls.StartGRPC
	lockWordSearchServiceMockStartGRPC.RUnlock()
	return calls
}

// StartREST calls StartRESTFunc.
func (mock *WordSearchServiceMock) StartREST() error {
	if mock.StartRESTFunc == nil {
		panic("WordSearchServiceMock.StartRESTFunc: method is nil but WordSearchService.StartREST was just called")
	}
	callInfo := struct {
	}{}
	lockWordSearchServiceMockStartREST.Lock()
	mock.calls.StartREST = append(mock.calls.StartREST, callInfo)
	lockWordSearchServiceMockStartREST.Unlock()
	return mock.StartRESTFunc()
}

// StartRESTCalls gets all the calls that were made to StartREST.
// Check the length with:
//     len(mockedWordSearchService.StartRESTCalls())
func (mock *WordSearchServiceMock) StartRESTCalls() []struct {
} {
	var calls []struct {
	}
	lockWordSearchServiceMockStartREST.RLock()
	calls = mock.calls.StartREST
	lockWordSearchServiceMockStartREST.RUnlock()
	return calls
}

// TopFiveSearch calls TopFiveSearchFunc.
func (mock *WordSearchServiceMock) TopFiveSearch(ctx context.Context, req *wsproto.TopFiveRequest) (*wsproto.TopFiveResponse, error) {
	if mock.TopFiveSearchFunc == nil {
		panic("WordSearchServiceMock.TopFiveSearchFunc: method is nil but WordSearchService.TopFiveSearch was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *wsproto.TopFiveRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	lockWordSearchServiceMockTopFiveSearch.Lock()
	mock.calls.TopFiveSearch = append(mock.calls.TopFiveSearch, callInfo)
	lockWordSearchServiceMockTopFiveSearch.Unlock()
	return mock.TopFiveSearchFunc(ctx, req)
}

// TopFiveSearchCalls gets all the calls that were made to TopFiveSearch.
// Check the length with:
//     len(mockedWordSearchService.TopFiveSearchCalls())
func (mock *WordSearchServiceMock) TopFiveSearchCalls() []struct {
	Ctx context.Context
	Req *wsproto.TopFiveRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *wsproto.TopFiveRequest
	}
	lockWordSearchServiceMockTopFiveSearch.RLock()
	calls = mock.calls.TopFiveSearch
	lockWordSearchServiceMockTopFiveSearch.RUnlock()
	return calls
}

// UpdateWordList calls UpdateWordListFunc.
func (mock *WordSearchServiceMock) UpdateWordList(ctx context.Context, req *wsproto.UpdateWordListRequest) (*wsproto.UpdateWordListResponse, error) {
	if mock.UpdateWordListFunc == nil {
		panic("WordSearchServiceMock.UpdateWordListFunc: method is nil but WordSearchService.UpdateWordList was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *wsproto.UpdateWordListRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	lockWordSearchServiceMockUpdateWordList.Lock()
	mock.calls.UpdateWordList = append(mock.calls.UpdateWordList, callInfo)
	lockWordSearchServiceMockUpdateWordList.Unlock()
	return mock.UpdateWordListFunc(ctx, req)
}

// UpdateWordListCalls gets all the calls that were made to UpdateWordList.
// Check the length with:
//     len(mockedWordSearchService.UpdateWordListCalls())
func (mock *WordSearchServiceMock) UpdateWordListCalls() []struct {
	Ctx context.Context
	Req *wsproto.UpdateWordListRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *wsproto.UpdateWordListRequest
	}
	lockWordSearchServiceMockUpdateWordList.RLock()
	calls = mock.calls.UpdateWordList
	lockWordSearchServiceMockUpdateWordList.RUnlock()
	return calls
}
