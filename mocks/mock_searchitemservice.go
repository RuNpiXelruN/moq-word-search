// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"

	wsproto "github.com/RuNpiXelruN/moq-word-search/proto"
)

var (
	lockSearchItemServiceMockIncrementCount sync.RWMutex
	lockSearchItemServiceMockWordExists     sync.RWMutex
)

// Ensure, that SearchItemServiceMock does implement moqwordsearch.SearchItemService.
// If this is not the case, regenerate this file with moq.
// var _ moqwordsearch.SearchItemService = &SearchItemServiceMock{}

// SearchItemServiceMock is a mock implementation of moqwordsearch.SearchItemService.
//
//     func TestSomethingThatUsesSearchItemService(t *testing.T) {
//
//         // make and configure a mocked moqwordsearch.SearchItemService
//         mockedSearchItemService := &SearchItemServiceMock{
//             IncrementCountFunc: func(item *wsproto.SearchItem)  {
// 	               panic("mock out the IncrementCount method")
//             },
//             WordExistsFunc: func(searchTerm string, items []*wsproto.SearchItem, increment bool) bool {
// 	               panic("mock out the WordExists method")
//             },
//         }
//
//         // use mockedSearchItemService in code that requires moqwordsearch.SearchItemService
//         // and then make assertions.
//
//     }
type SearchItemServiceMock struct {
	// IncrementCountFunc mocks the IncrementCount method.
	IncrementCountFunc func(item *wsproto.SearchItem)

	// WordExistsFunc mocks the WordExists method.
	WordExistsFunc func(searchTerm string, items []*wsproto.SearchItem, increment bool) bool

	// calls tracks calls to the methods.
	calls struct {
		// IncrementCount holds details about calls to the IncrementCount method.
		IncrementCount []struct {
			// Item is the item argument value.
			Item *wsproto.SearchItem
		}
		// WordExists holds details about calls to the WordExists method.
		WordExists []struct {
			// SearchTerm is the searchTerm argument value.
			SearchTerm string
			// Items is the items argument value.
			Items []*wsproto.SearchItem
			// Increment is the increment argument value.
			Increment bool
		}
	}
}

// IncrementCount calls IncrementCountFunc.
func (mock *SearchItemServiceMock) IncrementCount(item *wsproto.SearchItem) {
	if mock.IncrementCountFunc == nil {
		panic("SearchItemServiceMock.IncrementCountFunc: method is nil but SearchItemService.IncrementCount was just called")
	}
	callInfo := struct {
		Item *wsproto.SearchItem
	}{
		Item: item,
	}
	lockSearchItemServiceMockIncrementCount.Lock()
	mock.calls.IncrementCount = append(mock.calls.IncrementCount, callInfo)
	lockSearchItemServiceMockIncrementCount.Unlock()
	mock.IncrementCountFunc(item)
}

// IncrementCountCalls gets all the calls that were made to IncrementCount.
// Check the length with:
//     len(mockedSearchItemService.IncrementCountCalls())
func (mock *SearchItemServiceMock) IncrementCountCalls() []struct {
	Item *wsproto.SearchItem
} {
	var calls []struct {
		Item *wsproto.SearchItem
	}
	lockSearchItemServiceMockIncrementCount.RLock()
	calls = mock.calls.IncrementCount
	lockSearchItemServiceMockIncrementCount.RUnlock()
	return calls
}

// WordExists calls WordExistsFunc.
func (mock *SearchItemServiceMock) WordExists(searchTerm string, items []*wsproto.SearchItem, increment bool) bool {
	if mock.WordExistsFunc == nil {
		panic("SearchItemServiceMock.WordExistsFunc: method is nil but SearchItemService.WordExists was just called")
	}
	callInfo := struct {
		SearchTerm string
		Items      []*wsproto.SearchItem
		Increment  bool
	}{
		SearchTerm: searchTerm,
		Items:      items,
		Increment:  increment,
	}
	lockSearchItemServiceMockWordExists.Lock()
	mock.calls.WordExists = append(mock.calls.WordExists, callInfo)
	lockSearchItemServiceMockWordExists.Unlock()
	return mock.WordExistsFunc(searchTerm, items, increment)
}

// WordExistsCalls gets all the calls that were made to WordExists.
// Check the length with:
//     len(mockedSearchItemService.WordExistsCalls())
func (mock *SearchItemServiceMock) WordExistsCalls() []struct {
	SearchTerm string
	Items      []*wsproto.SearchItem
	Increment  bool
} {
	var calls []struct {
		SearchTerm string
		Items      []*wsproto.SearchItem
		Increment  bool
	}
	lockSearchItemServiceMockWordExists.RLock()
	calls = mock.calls.WordExists
	lockSearchItemServiceMockWordExists.RUnlock()
	return calls
}
