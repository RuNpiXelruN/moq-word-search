// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/RuNpiXelruN/moq-word-search"
	"sync"
)

var (
	lockWordSearchServiceMockStartGRPC sync.RWMutex
	lockWordSearchServiceMockStartREST sync.RWMutex
)

// Ensure, that WordSearchServiceMock does implement moqwordsearch.WordSearchService.
// If this is not the case, regenerate this file with moq.
var _ moqwordsearch.WordSearchService = &WordSearchServiceMock{}

// WordSearchServiceMock is a mock implementation of moqwordsearch.WordSearchService.
//
//     func TestSomethingThatUsesWordSearchService(t *testing.T) {
//
//         // make and configure a mocked moqwordsearch.WordSearchService
//         mockedWordSearchService := &WordSearchServiceMock{
//             StartGRPCFunc: func() error {
// 	               panic("mock out the StartGRPC method")
//             },
//             StartRESTFunc: func() error {
// 	               panic("mock out the StartREST method")
//             },
//         }
//
//         // use mockedWordSearchService in code that requires moqwordsearch.WordSearchService
//         // and then make assertions.
//
//     }
type WordSearchServiceMock struct {
	// StartGRPCFunc mocks the StartGRPC method.
	StartGRPCFunc func() error

	// StartRESTFunc mocks the StartREST method.
	StartRESTFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// StartGRPC holds details about calls to the StartGRPC method.
		StartGRPC []struct {
		}
		// StartREST holds details about calls to the StartREST method.
		StartREST []struct {
		}
	}
}

// StartGRPC calls StartGRPCFunc.
func (mock *WordSearchServiceMock) StartGRPC() error {
	if mock.StartGRPCFunc == nil {
		panic("WordSearchServiceMock.StartGRPCFunc: method is nil but WordSearchService.StartGRPC was just called")
	}
	callInfo := struct {
	}{}
	lockWordSearchServiceMockStartGRPC.Lock()
	mock.calls.StartGRPC = append(mock.calls.StartGRPC, callInfo)
	lockWordSearchServiceMockStartGRPC.Unlock()
	return mock.StartGRPCFunc()
}

// StartGRPCCalls gets all the calls that were made to StartGRPC.
// Check the length with:
//     len(mockedWordSearchService.StartGRPCCalls())
func (mock *WordSearchServiceMock) StartGRPCCalls() []struct {
} {
	var calls []struct {
	}
	lockWordSearchServiceMockStartGRPC.RLock()
	calls = mock.calls.StartGRPC
	lockWordSearchServiceMockStartGRPC.RUnlock()
	return calls
}

// StartREST calls StartRESTFunc.
func (mock *WordSearchServiceMock) StartREST() error {
	if mock.StartRESTFunc == nil {
		panic("WordSearchServiceMock.StartRESTFunc: method is nil but WordSearchService.StartREST was just called")
	}
	callInfo := struct {
	}{}
	lockWordSearchServiceMockStartREST.Lock()
	mock.calls.StartREST = append(mock.calls.StartREST, callInfo)
	lockWordSearchServiceMockStartREST.Unlock()
	return mock.StartRESTFunc()
}

// StartRESTCalls gets all the calls that were made to StartREST.
// Check the length with:
//     len(mockedWordSearchService.StartRESTCalls())
func (mock *WordSearchServiceMock) StartRESTCalls() []struct {
} {
	var calls []struct {
	}
	lockWordSearchServiceMockStartREST.RLock()
	calls = mock.calls.StartREST
	lockWordSearchServiceMockStartREST.RUnlock()
	return calls
}
